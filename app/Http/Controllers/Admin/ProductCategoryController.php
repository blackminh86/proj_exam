<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\ProductCategory as MainModel;
use App\Http\Requests\ProductCategoryRequest as MainRequest;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Response;

class ProductCategoryController extends AdminController
{
    public function __construct()
    {
        $this->pathViewController = 'admin.pages.product_category.';
        $this->controllerName     = 'productCategory';
        $this->table              = 'product_categories';
        $this->model = new MainModel();
        $this->params["pagination"]["totalItemsPerPage"] = 20;
        view()->share('controllerName', $this->controllerName);
        view()->share('table',  $this->table);
    }
    public function form(Request $request)
    {
        $item = null;
        if ($request->id !== null) {
            $params["id"] = $request->id;
            $item = $this->model->getItem($params, ['task' => 'get-item']);
        }
        return view($this->pathViewController .  'form', [
            'item'         => $item,
        ]);
    }

    public function save(MainRequest $request)
    {
        if ($request->method() == 'POST') {
            $params = $request->all();
            $task   = "add-item";
            $notify = "Thêm phần tử thành công!";
            if ($params['id'] !== null) {
                $task   = "edit-item";
                $notify = "Cập nhật phần tử thành công!";
            }
            $this->model->saveItem($params, ['task' => $task]);
            MainModel::fixTree();
            return redirect()->route($this->controllerName)->with("zvn_notify", $notify);
        }
    }
    public function autoGeneratedForm(Request $request)
    {
        return view($this->pathViewController .  'auto_generated', []);
    }
    public function autoGeneratedSave(Request $request)
    {
        $params = $request->all();
        $newArray = [];
        $newCategory = $this->model->autoCategory($params['parent_id'], $newArray);
        if ($params['keep_parent'] == 1) {
            $newCategory[] = ["id" => $params['parent_id'], "name" => $params['name'], 'status' => 'active', "is_home" => "yes" ,  "display"   => "list" , "parent_id" => 1 ];
            MainModel::insert($newCategory);
        } else {
            MainModel::insert($newCategory);
            MainModel::where('parent_id', $params['parent_id'])->update(['parent_id'=> 1]);
        }
        MainModel::fixTree();
        return redirect(route($this->controllerName));
    }
    public function updateMove(Request $request)
    {
        $params = $request->all();
        $params['limit'] =  $this->params["pagination"]["totalItemsPerPage"];
        $items = $this->model->move($params);
        $contents = View::make('admin.pages.product_category.tbody', [
            'items' => $items,
            'currentPage' => $params['currentPage']
        ]);
        $response = Response::make($contents);
        $response->header('Content-Type', 'text/plain');
        return $response;
    }
}
